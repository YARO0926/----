파이썬

2주차

키워드: 특별한 의미가 부여된 단어
False, None, True, and, as, assert, break, class, continue, def, del, elif, else, except, finally, for, from, global, if, import, in, is, lamda, ninlocal, not, or, pas, raise, return, try, while, with, yield

식별자: 변수에 부여하 이름
프로그래밍 언어에서 이름 붙일 때 사용하는 단어
알파벳 사용이 관례

사용 기본규칙
키워드 사용 불가
특수문자는 _ 만 허용
숫자로 시작 불가
공백 사용 불가

스네이크 케이스: 단어 사이에 _기호 사용하여 식별자 형성
캐멀 케이스: 단어 첫 글자를 대문자로 하여 식별자 형성

함수: 글자 뒤 괄호가 있는 경우
괄호에 문자열 등 자료 입력

주석: 프로그램 설명하는 코드
프로그램 진행에 영향 주지 않음
앞에 # 기호 붙여 주석 처리

len()함수: 괄호 안 문자열의 글자 수 표시
함수 중첩될 경우 괄호 안쪽부터 실행됨

type()함수: 자료의 형태 확인
int: 정수
float: 부동 소수점

연산자의 우선순위: 곱셈과 나눗셈을 덧셈과 뺄셈보다 우선시
같은 우선순위는 왼쪽에서 오른쪽 순서로 계산
괄호 사용하여 우선순위 조정
문자열 연산자에서도 동일 규칙 적용

변수: 값을 저장하기 위한 메모리 공간(variable)
값을 저장하는 식별자
숫자 ㅁㅊ 모든 자료형 저장 가능
같은 변수에 여러 종류의 자료형 넣을 수 있음

입력 자료형: input() 함수의 결과는 무조건 문자열 자료형

문자열을 숫자로 바꾸기
int() float()



3주차 파이썬 정리

16진수 접두사: 0x (heXadecimal number)
2진수 접두사: 0b (Binary number)
8진수 접두사: 0o (Octal number)

부동 소수형:소수점을 움직여서 소수를 표현하는 자료형
8바이트만을 이용해서 수를 표현
정밀도의 한계를 가짐

abs(): 절댓값 계산 함수-내장함수
round(): 반올림 계산 함수-내장함수
trunc(): 버림 계산 함수-math 모듈
factorial(): 팩토리얼 계산 함수

startswith(): 원본 문자열이 매개변수로 입력한 문자열로 시작되는지를 판단한다.
결과는 true,false로 나옴
endswith(): 원본 문자열이 매개변수로 입력한 문자열로 끝나는지를 판단한다.
결과는 true,false로 나옴
find(): 원본 문자열 안에 매개변수로 입력한 문자열이 존재하는 위치를 앞에서부터 찾는다.
존재하지 않으면 -1을 결과로 냄
rfind(): 원본 문자열 안에 매개변수로 입력한 문자열이 존재하는 위치를 뒤에서부터 찾는다.
존재하지 않으면 -1을 결과로 냄
count(): 원본 문자열 안에 매개변수로 입력한 문자열이 몇번 등장하는지 셈
rstrip(): 원본 문자열 오른쪽에 있는 공백을 제거한다.
lstrip(): 원본 문자열 왼쪽에 있는 공백을 제거한다.
strip(): 원본 문자열 양쪽에 있는 공백을 제거한다.
isalpha(): 원본 문자열이 숫자와 기호를 제외한 알파벳(영어,한글 등)으로만 이루어져있는지 평가한다.
isnumeric(): 원본 문자열이 수로만 이루어져 있는지를평가한다.
isalnum(): 원본 문자열이 알파뱃과 수로만 이루어져 있는지 평가한다.
replace(): 원본 문자열에서 찾고자 하는 문자열을 바꾸고자 하는 문자열로 변경한다.
split(): 매개변수로 입력한 문자열을 기준으로 원본 문자열을 나누어 리스트를 만든다.
리스트는 목록을 다루는 자료형이다.
upper(): 원본 문자열을 모두 대문자로 바꾼 문자열을 냄
lower(): 원본 문자열을 모두 소문자로 바꾼 문자열을 냄
format(): 형식을 갖춘 문자열을 만들 때 사용한다.
문자열 안에 중괄호가 다른 데이터가 들어갈 자리를 만들어 두고 format() 함수를 호출할 때 이 자리에 들어갈 데이터를 순서대로 넣어주면 원하는 형식의 문자열을 만들어 낼 수 있다.

<<(왼쪽 시프트 연산자): 첫 번째 피연산자의 비트를 두 번째 피연산자의 수만큼 왼쪽으로 이동시킨다.
>>(오른쪽 시프트 연산자): 첫 번째 피연산자의 비트를 두 번째 피연산자의 수만큼 오른쪽으로 이동시킨다.
&(논리곱(AND) 연산자): 두 피연산자의 비트 논리곱을 수행한다.
|(논리합(OR)연산자): 두 피연산자의 비트 논리합을 수행한다.
^(배타적 논리합(XOR)연산자): 두 피연산자의 비트 베타적 논리합을 수행한다.
~(보수(NOT)연산자): 피연산자의 비트를 0은 1로, 1은 0으로 반전시킨다. 단항연산자이다.

비트 다루기-비트 논리 연산자
논리곱: 두 비트 모두가 1(참)이어야 결과도 1(참)
논리곱 연산자는 &
논리합: 둘 중 하나라도 참(1)이면 결과도 참(1)
논리합 연산자는 |
배타적 논리합: 두 피연산자의 진리값이 서로 달라야 참(1)
배타적 논리합 연산자는 ^
보수 연산: 피연산자의 비트를 0에서 1로, 1에서 0으로 뒤집음
보수 연산자는 ~

Type(): 변수가 bool(불형), int(정수), float(실수), str(문자열)형으로 생성된 것을 확인할 수 있음

비트: 컴퓨터에서 표현할 수 있는 제일 작은 단위
바이트: 비트 8개가 모인 것



4주차

불(boolean): 참과 거짓을 나타내는 값으로서의 기본적 자료형
오직 두가지 값만 가짐
연산자: 비교 연산자 통해 불 만듦
not: 불을 반대로 전환
and: 피연산자 두개가 모두 참일 때 true를 출력하며 나머지의 경우는 모두 false를 출력한다

조건문: 조건에 따라 코드 시행하거나/ 실행하지 않도록 만드는 구문
코드의 실행 흐름 변경


5주차

리스트: 데이터의 목록을 다루는 자료형
슬롯: 리스트의 데이터를 삽입할 자리
요소: 리스트의 각 슬롯에 꽂혀있는 개별 데이터

리스트를 만들 때는 대괄호 [] 를 씀

append(): 리스트의 끝에 새 요소를 추가한다.
extend(): 기존 리스트에 다른 리스트를 이어 붙입니다.+연산자와 같은 기농을 한다고 할 수 있습니다.
insert(): 첨자로 명시한 리스트 내의 위치에 새 요소를 삽입한다. insert(첨자,데이터)의 형식으로 사용한다.
remove(): 매개 변수로 입력한 데이터를 리스트에서 찾아 발견한 첫 번째 요소를 제거합니다.
pop(): 리스트의 마지막 요소를 뽑아내어 리스트에서 제거한다.
한편, 마지막이 아닌 특정 요소를 제거하고 싶을 때에는 pop() 매서드에 제거하고자 하는 요소의 인덱스를 입력하면 된다.
index(): 리스트 내에서 매개변수로 입력한 데이터와 일치하는 첫번쨰 요소의 첨자를 알려준다. 찾고자 하는 데이터와 일치하는 요소가 없으면 오류를 일으킴.
count(): 매개변수로 입력한 데이터와 일치하는 요소가 몇 개 존재하는지 센다.
sort(): 리스트 내의 요소를 정렬한다. 매개변수로 reverse= True 를 입력하면 내림차순,아무것도 입력하지 안흥면 오름차순으로 정렬한다. reverse= True와 같이 이름을 명시하여 사용하는 매개변수를 일컬어 키워드 매개변수라고 한다.
reverse(): 리스트 내 요소의 순서를 반대로 뒤집는다.

튜플: 사전적 의미는 리스트와 비슷
리스트와 튜플의 차이:
리스트는 데이터 변경 가능/튜플은 불가능
리스트는 이름 그대로 목록 형식의 데이터를 다루는데 적합하다.
튜플은 위경도 좌표나 RGB 색상처럼 작은 규모의 자료의 자료구조를 구성하기에 적합

튜플
변경이 불가능한 자료형이 필요한 이유
성능-변경 가능한 자료형과는 달리 데이터를 할당할 공간의 내용이나 크기가 달라지지 않기 때문에 생성 과정이 간단하다.
데이터가 오염되지 않을 것이라는 보장이 있기 때문에 복사본을 만드는 대신 그냥 원본을 사용
신뢰 가능한 코드-변경되지 않아야 할 데이터를 오염시키는 버그를 만들 가능성 제거
코드를 설계할 때부터 변경이 가능한 데이터와 그렇지 않은 데이터를 정리해서 코드에 반영한다.

index(): 매개변수로 입력한 데이터와 일치하는 튜플 내 요소의 첨자를 알려준다.
찾고자 하는 데이터와 일치하는 요소가 없으면 에러를 일으킨다.
count(): 맴개변수로 입력한 데이터와 일치하는 요소가 몇 개 존재하는지 센다.

딕셔너리: 리스트는 요소에 접글할 때 0부터 시작하는 수 첨자만 사용할 수 있지만 딕셔너리는 문자열과 숫자를 비롯해서 변경이 불가능한 형식이면 어떤 자료든 사용한다.
탐색속도가 빠르고, 사용하기도 편리하다.
딕셔너리를 만들 때는 중괄호{} 사용
특정 슬롯에 새로운 키-값을 입력하거나 딕셔너리 안에 있는 요소를 참조할 때는 리스트와 튜플에서처럼 대괄호[] 사용

bool: True와 False 두 가지 값을 나타내는 자료


논리연산자

not 연산자: 피연산자를 부정. 피연산자가 False인 경우에는 True, 그렇지 않은 경우에는 False 출력
수, 문자열, 튜플, 리스트, 딕셔너리도 피연산자로 사용 가능
입력된 피연산자가 0인 경우에는 피연산자를 거짓으로 간주, not 연산의 결과는 True
0이 아닌 수를 피연산자로 사용하는 경우의 not 연산 결과는 False
None에 대해서도 거짓으로 간주하기 때문에 not None의 결과는 True
not 연산자는 비어있는 문자열이나 튜플, 리스트, 딕셔너리도 거짓으로 간주

and 연산자: 두 피연산자 간의 논리곱을 수행
논리곱 연산의 결과는 두 피연산자 모두가 True인 경우에만 True가 되고, 그롷지 않은 경우에는 항상 False

or 연산자: 두 피연산자 모두가 False인 경우에만 False가 되고, 그렇지 않은 경우에는 그 결과가 항상 True

흐름 제어문: 흐름을 분기하거나 반복하기 전에 조건문의 결과가 참인지를 평가 수행
조건문이 구체적으로 다음과 같을 때 거짓으로 평가
)False
)None
)숫자 0
)비어있는 순서열((),{} 등)
)비어있는 딕셔너리( [] 등)
어떤 객체가 거짓으로 평가되는지를 알고 싶을 때는 bool() 함수 이용

코드 블록:
여러 코드가 이루는 일정한 구역
프로그래밍 언어들마다 이것을 표현하는 방법이 다름
파이썬은 들여쓰기로 구역을 나눔
들여쓰기는 스페이스 나 탭 둘 다 가능

비교 연산자: 두 피연산자를 비교하는 연산자
파이썬은 다음 표와 같이 6가지를 제공
==: 양쪽에 위치한 피연산자가 서로 같으면 True, 아니면 False
!=: 양쪽에 위치한 피연산자가 서로 다르면
>: 왼쪽에 위치한 피연산자가 오른쪽 피연산자보다 크면
>=: 왼쪽에 위치한 피연산자가 오른쪽 피연산자보다 크거나 같으면
<: 왼쪽에 위치한 피연산자가 오른쪽 피연산자보다 작으면
<=: 왼쪽에 위치한 피연산자가 오른쪽 피연산자보다 작거나 같으면


분기문
소프트웨어=컴퓨터가 할일의 목록
프로그래머가 컴퓨터에게 할 일의 목록을 내주면, 컴퓨터는 소프트웨어에 기록되어있는 목록을 보고 그대로 수행
프로그래밍에서 흐름(Flow)은 컴퓨터에서 내려지는 명령의 순서를 가리킴
분기문: 프로그램의 흐름을 가르는 문장

분기문-if문
if문의 조건은 참 아니면 거짓으로 평가될 수 있어야 함
조건 뒤에 있는 콜론 : 은 해당 조건이 참일 결우에 실행할 코드 블록을 위치시키기 위함임
else 절로 코드가 흐르는 경우는 if절의 조건이 거짓으로 평

반복문: 프로그램의 흐름을 되풀이하는 흐름 제어문
루프문 이라고도 함

반복문-while문
while 키워드가 먼저 위치하고 그 다음에 조건이 위치
조건 뒤에는 코드블록을 위치시키기 전에 콜론 : 이 위치
while코드를 읽을 때는 '조건이 참인 동안' 이라고해석

무한루프: while문의 조건이 항상 참이 되는 루프

반복문-for문
for문은 조건을 평가하는 대신 순서열을 순회하다가 순서열의 끝에 도달하면 반복을 종료함

반복문 continue와 break로 반복문 제어하기
continue: 반복문이 실행하는 코드블록의 나머지 부분을 실행하지 않고 다음 반복으로 건너가도록 흐름을 조정
break: 루프를 중단시키는 기능 수행


6주차

함수: 어떤 기능을 하도록 작성된 작은 프로그램
내장함수: 프로그래밍 언어가 기본적으로 제공하는 함수
모든 프로그래밍 언어는 많이 사용하거나, 중요한 함수를 내장함수로 제공

abs(): 절댓값
len(): 문자열,리스트,딕셔너리,레인지 데이터 세트에 저장된 데이터 개수 계산 가능
sum(): 리스트에 저장된 정수, 실수 등 숫자 데이터의 합계를 계산

사용자 정의 함수: 프로그래머가 직접 만든 함수

return: 함수 결괏값을 전달하는 명령어
데이터 종류에 상관없이 결괏값으로 전달 가능

append: 마지막에 데이터를 추가한다.
insert: 중간에 데이터를 추가한다.

함수를 호출할 때 전달하는 데이터는 인수
함수 보디에서 인수를 저장한 변수는 매개변수

반환값: 반환값은 return 문으로 반환되므로 리턴값이라고도 한다. 매개변수는 파라미터라고도 한다


6-2주차

함수: 어떤 기능을 하도록 작성된 작은 프로그램
함수를 사용하면 기능별로 코드를 나눠서 작성하 수 있음->코드를 재사용 가능
내장함수: 프로그래밍 언어가 기본적으로 제공하는 함수
모든 프로그래밍 언어는 많이 사용하거나, 중요한 함수를 내장함수로 제공
총 69개

abs(): 절댓값
len(): 문자열, 리스트, 딕셔너리, 레인지 데이터 세트에 저장된 데이터 개수 계산 가능
sum(): 리스트에 저장된 정수, 실수 등 숫자 데이터의 합계를 계산
사용자 정의 함수: 프로그래머가 직접 만든 함수
return(): 현재 실행중인 함수를 종료하고, 결괏값을 함수를 호출한 위치로 전달

리스트에 데이터 추가하기
append: 마지막에 데이터를 추가하는 방법
insert: 중간에 데이터를 추가하는 방법

인수: 함수를 호출할 때 전달하는 데이터
매개 변수: 함수 보디에서 인수를 저장한 변수는 매개 변수

메서드: 함수는 외부에 별도로 존재, 메서드는 클래스 안에 존재


---------------------------------------------------------------------------------------------------










